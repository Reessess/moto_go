import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import 'package:moto_go/Menu/setting_screen.dart';
import 'package:moto_go/Menu/profile_screen.dart';
import 'package:moto_go/Menu/bike_screen.dart';
import 'package:moto_go/Model/bike.dart';

class Homescreen extends StatefulWidget {
  const Homescreen({super.key});

  @override
  State<Homescreen> createState() => _HomescreenState();
}

class _HomescreenState extends State<Homescreen> {
  int _selectedIndex = 0;
  List<Bikes> _bikes = [];
  bool _isLoading = true;
  String _error = '';

  @override
  void initState() {
    super.initState();
    fetchBikes();
  }

  Future<void> fetchBikes() async {
    try {
      final response =
      await http.get(Uri.parse('http://192.168.5.129:3000/api/bikes'));
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        setState(() {
          _bikes = data.map((json) => Bikes.fromJson(json)).toList();
          _isLoading = false;
          _error = '';
        });
      } else {
        setState(() {
          _error = 'Failed to load bikes: ${response.statusCode}';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _error = 'Error fetching bikes: $e';
        _isLoading = false;
      });
    }
  }

  void _onItemTapped(int index) {
    if (index == _selectedIndex) return;

    setState(() => _selectedIndex = index);

    if (index == 1) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Ride History'),
          content: const Text('Ride History feature coming soon!'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() {
                  _selectedIndex = 0;
                });
              },
              child: const Text('OK'),
            ),
          ],
        ),
      );
    }
  }

  Widget _buildMenuTile({required Widget child}) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: const [
          BoxShadow(color: Colors.black12, blurRadius: 4, offset: Offset(0, 2))
        ],
      ),
      child: child,
    );
  }

  @override
  Widget build(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;

    return Scaffold(
      drawer: SafeArea(
        child: Drawer(
          child: ListView(
            padding: EdgeInsets.zero,
            children: [
              Container(
                padding: const EdgeInsets.all(24),
                decoration: const BoxDecoration(
                  color: Colors.orange,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(20),
                    bottomRight: Radius.circular(20),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Image.asset('assets/Icon.PNG', height: 60),
                    const SizedBox(height: 10),
                    const Text('Welcome to',
                        style: TextStyle(color: Colors.white70, fontSize: 18)),
                    const Text('MotoGO',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          fontFamily: 'nunito',
                        )),
                  ],
                ),
              ),
              _buildMenuTile(
                child: ListTile(
                  leading: const Icon(Icons.person),
                  title: const Text('Profile'),
                  onTap: () {
                    Navigator.pop(context);
                    Navigator.push(context,
                        MaterialPageRoute(builder: (_) => const ProfileScreen()));
                  },
                ),
              ),
              _buildMenuTile(
                child: ListTile(
                  leading: const Icon(Icons.motorcycle),
                  title: const Text('Bikes'),
                  onTap: () {
                    Navigator.pop(context);
                    Navigator.push(context,
                        MaterialPageRoute(builder: (_) => const BikesScreen()));
                  },
                ),
              ),
              _buildMenuTile(
                child: ListTile(
                  leading: const Icon(Icons.settings),
                  title: const Text('Settings'),
                  onTap: () {
                    Navigator.pop(context);
                    Navigator.push(context,
                        MaterialPageRoute(builder: (_) => const SettingScreen()));
                  },
                ),
              ),
              _buildMenuTile(
                child: ListTile(
                  leading: const Icon(Icons.book_online),
                  title: const Text('My Bookings'),
                  onTap: () {},
                ),
              ),
              _buildMenuTile(
                child: ListTile(
                  leading: const Icon(Icons.logout, color: Colors.orange),
                  title:
                  const Text('Logout', style: TextStyle(color: Colors.orange)),
                  onTap: () {
                    Navigator.pop(context);
                    // TODO: Implement logout
                  },
                ),
              ),
            ],
          ),
        ),
      ),
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Stack(
          children: [
            CustomPaint(size: Size.infinite, painter: MapShapePainter()),
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : _error.isNotEmpty
                ? Center(child: Text(_error))
                : SingleChildScrollView(
              padding: const EdgeInsets.only(bottom: 16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 20),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Builder(
                          builder: (context) => Row(
                            children: [
                              IconButton(
                                icon: const Icon(Icons.menu,
                                    size: 28, color: Colors.black),
                                onPressed: () =>
                                    Scaffold.of(context).openDrawer(),
                              ),
                              const SizedBox(width: 10),
                              Image.asset('assets/Icon.PNG', height: 40),
                            ],
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.search,
                              size: 28, color: Colors.black),
                          onPressed: () {
                            showSearch(
                              context: context,
                              delegate: BikeSearchDelegate(_bikes),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      'Pick Your Bike',
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'nunito',
                        color: Colors.black,
                      ),
                    ),
                  ),
                  const SizedBox(height: 25),
                  SizedBox(
                    height: height * 0.5,
                    child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: _bikes.length,
                      padding: const EdgeInsets.only(left: 16),
                      itemBuilder: (context, index) {
                        final bike = _bikes[index];
                        return _buildBikeCard(context, bike);
                      },
                    ),
                  ),
                  const SizedBox(height: 30),
                  const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      'Top Picks ‚≠ê',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'nunito',
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: _bikes.length,
                    itemBuilder: (context, index) {
                      final bike = _bikes[index];
                      return _buildTopPickCard(context, bike);
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        selectedItemColor: Colors.orange,
        unselectedItemColor: Colors.grey,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.history), label: 'Ride History'),
        ],
      ),
    );
  }

  Widget _buildBikeCard(BuildContext context, Bikes bike) {
    return Center( // Center the card
      child: GestureDetector(
        onTap: () {
          // Navigate to bike details screen on tapping the card
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => BikeDetailsScreen(bike: bike),
            ),
          );
        },
        child: Container(
          width: 250,
          margin: const EdgeInsets.symmetric(horizontal: 8), // Equal spacing for center effect
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(30),
            color: Colors.white,
            boxShadow: const [
              BoxShadow(color: Colors.black12, blurRadius: 8, offset: Offset(0, 4)),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Hero(
                tag: 'bikeImage_${bike.id}',
                child: ClipRRect(
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(30)),
                  child: Image.network(
                    bike.imageUrl,
                    height: 200,
                    width: double.infinity,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) =>
                        Container(color: Colors.grey, height: 200),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(bike.brand,
                        style: const TextStyle(
                            fontSize: 22, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 6),
                    Text(bike.model,
                        style: const TextStyle(fontSize: 16, color: Colors.grey)),
                    const SizedBox(height: 6),
                    Text('\$${bike.pricePerHour.toStringAsFixed(2)}/hour',
                        style: const TextStyle(fontSize: 16, color: Colors.orange)),
                    const SizedBox(height: 12),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => BikeDetailsScreen(bike: bike),
                            ),
                          );
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: const Text('Book'),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }


  Widget _buildTopPickCard(BuildContext context, Bikes bike) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => BikeDetailsScreen(bike: bike),
          ),
        );
      },
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          color: Colors.white,
          boxShadow: const [
            BoxShadow(color: Colors.black12, blurRadius: 6, offset: Offset(0, 3)),
          ],
        ),
        child: ListTile(
          leading: Hero(
            tag: 'bikeImage_${bike.id}',
            child: ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                bike.imageUrl,
                width: 80,
                height: 80,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    Container(color: Colors.grey, width: 80, height: 80),
              ),
            ),
          ),
          title: Text(
            '${bike.brand} ${bike.model}',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          subtitle: Text('\$${bike.pricePerHour.toStringAsFixed(2)}/hour'),
          trailing: ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => BikeDetailsScreen(bike: bike),
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
            ),
            child: const Text('Book'),
          ),
        ),
      ),
    );
  }
}

// New BikeDetailsScreen widget:
class BikeDetailsScreen extends StatelessWidget {
  final Bikes bike;
  const BikeDetailsScreen({required this.bike, super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${bike.brand} ${bike.model}'),
        backgroundColor: Colors.orange,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Hero(
            tag: 'bikeImage_${bike.id}',
            child: Image.network(
              bike.imageUrl,
              height: 250,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) =>
                  Container(color: Colors.grey, height: 250),
            ),
          ),
          const SizedBox(height: 16),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Text(
              bike.brand,
              style: const TextStyle(
                  fontSize: 28, fontWeight: FontWeight.bold, fontFamily: 'nunito'),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
            child: Text(
              bike.model,
              style: const TextStyle(fontSize: 22, color: Colors.grey),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            child: Text(
              '\$${bike.pricePerHour.toStringAsFixed(2)}/hour',
              style: const TextStyle(fontSize: 22, color: Colors.orange),
            ),
          ),const Padding(
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            child: Text(
              'Two wheels, endless journeys. Rent your ride today.',
              style: TextStyle(fontSize: 20, fontStyle: FontStyle.italic),
              textAlign: TextAlign.center, // Center the quote
            ),
          ),
          const Spacer(),
          Padding(
            padding: const EdgeInsets.all(16),
            child: ElevatedButton(
              onPressed: () {
                // TODO: Implement actual booking flow or navigate to booking screen
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Booking functionality coming soon!')),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
              child: const Text(
                'Book Now',
                style: TextStyle(fontSize: 20),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Painter class unchanged
class MapShapePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()..color = Colors.orange.withOpacity(0.15);

    final path = Path();
    path.moveTo(size.width * 0.2, size.height * 0.15);
    path.quadraticBezierTo(
      size.width * 0.25,
      size.height * 0.05,
      size.width * 0.4,
      size.height * 0.1,
    );
    path.quadraticBezierTo(
      size.width * 0.7,
      size.height * 0.3,
      size.width * 0.7,
      size.height * 0.5,
    );
    path.quadraticBezierTo(
      size.width * 0.75,
      size.height * 0.7,
      size.width * 0.55,
      size.height * 0.85,
    );
    path.quadraticBezierTo(
      size.width * 0.4,
      size.height * 0.95,
      size.width * 0.15,
      size.height * 0.7,
    );
    path.quadraticBezierTo(
      size.width * 0.05,
      size.height * 0.6,
      size.width * 0.2,
      size.height * 0.15,
    );

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

// Bike Search Delegate unchanged
class BikeSearchDelegate extends SearchDelegate {
  final List<Bikes> bikes;

  BikeSearchDelegate(this.bikes);

  @override
  List<Widget>? buildActions(BuildContext context) {
    return [
      IconButton(
          onPressed: () {
            query = '';
          },
          icon: const Icon(Icons.clear))
    ];
  }

  @override
  Widget? buildLeading(BuildContext context) {
    return IconButton(
        onPressed: () {
          close(context, null);
        },
        icon: const Icon(Icons.arrow_back));
  }

  @override
  Widget buildResults(BuildContext context) {
    final results = bikes.where((bike) =>
    bike.brand.toLowerCase().contains(query.toLowerCase()) ||
        bike.model.toLowerCase().contains(query.toLowerCase()));

    return ListView(
      children: results
          .map((bike) => ListTile(
        leading: Image.network(
          bike.imageUrl,
          width: 50,
          height: 50,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) =>
              Container(color: Colors.grey, width: 50, height: 50),
        ),
        title: Text('${bike.brand} ${bike.model}'),
        subtitle: Text('\$${bike.pricePerHour.toStringAsFixed(2)}/hour'),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => BikeDetailsScreen(bike: bike),
            ),
          );
        },
      ))
          .toList(),
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions = bikes.where((bike) =>
    bike.brand.toLowerCase().startsWith(query.toLowerCase()) ||
        bike.model.toLowerCase().startsWith(query.toLowerCase()));

    return ListView(
      children: suggestions
          .map((bike) => ListTile(
        leading: Image.network(
          bike.imageUrl,
          width: 50,
          height: 50,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) =>
              Container(color: Colors.grey, width: 50, height: 50),
        ),
        title: Text('${bike.brand} ${bike.model}'),
        subtitle: Text('\$${bike.pricePerHour.toStringAsFixed(2)}/hour'),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => BikeDetailsScreen(bike: bike),
            ),
          );
        },
      ))
          .toList(),
    );
  }
}
